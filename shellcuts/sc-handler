#!/usr/bin/env python3
"""Handles arguments from main shell function.

This is the core engine of the program. It handles all relevant options and
commands. After the arguments are parsed and handled, an output is printed to
the screen (but in practice this output is handled by the main shell function
and not necessarily printed to the screen).

Arguments:
    shellcut: Positional arg that represents name of shellcut to lookup.
    -d, --delete: Delete specified shellcut from shellcut file.
    -l, --list: Lists all known shellcuts.
    -n, --new: Add new shellcut to shellcut file.
    -p, --print: Print specified shellcut.

Returns:
    str: Either PRINT, TERMINATE, or JUMP.
        PRINT: Print whatever follows.
        TERMINATE: End the program without printing.
        JUMP: Change directory to the following string.
    str: Additional strings whose use is determined by the first str
         return value.

Legal:
    Author: Tiger Sachse
    License: GPLv3
    Version: 1.1.1
    Initial Release: 12/31/2017
    Current Release: 01/02/2018
"""

import os
import json
import argparse

# Can be changed to save the shellcuts in a different location.
F_SHELLCUTS = os.path.expanduser('~/.shellcuts.json')

def create_parser():
    """Create an argparse parser.

    Defines arguments and then returns the parser.
    """
    parser = argparse.ArgumentParser()
    parser.add_argument('shellcut', default=None, nargs='?')
    parser.add_argument('-d', '--delete')
    parser.add_argument('-l', '--list', action='store_true')
    parser.add_argument('-n', '--new')
    parser.add_argument('-p', '--print')

    return parser

def load_shellcuts():
    """Load the shellcuts file.

    Returns empty dictionary if the file does not exist.
    """
    try:
        with open(F_SHELLCUTS, 'r') as f:
            shellcuts = json.load(f)
    except FileNotFoundError:
        shellcuts = {}

    return shellcuts

def write_shellcuts(shellcuts):
    """Write shellcuts to file."""
    with open(F_SHELLCUTS, 'w') as f:
        json.dump(shellcuts, f)

def main():
    """Parse arguments and print output."""
    parser = create_parser()
    arguments = parser.parse_args()
    shellcuts = load_shellcuts()
    
    # If parser finds 'delete' or 'new' flags perform these corresponding
    # actions and then print TERMINATE.
    if arguments.delete or arguments.new:
        if arguments.delete:
            shellcuts.pop(arguments.delete, None)
        elif arguments.new:
            shellcuts[arguments.new] = os.getcwd()
        write_shellcuts(shellcuts)
        print("TERMINATE")

    # If parser finds 'print' or 'list' flags print PRINT and then print more
    # based on the flag found.
    elif arguments.print or arguments.list:
        print("PRINT")
        if arguments.print:
            try:
                print(arguments.print, ":", shellcuts[arguments.print])
            except KeyError:
                print("ERROR: That shellcut does not exist.")
        elif arguments.list:
            print("SHELLCUTS")
            for shellcut in shellcuts:
                print(shellcut, ":", shellcuts[shellcut])

    # If positional argument found, attempt to load the shellcut and then print
    # it to screen, else print an error.
    elif arguments.shellcut:
        try:
            shellcuts[arguments.shellcut]
            print("JUMP")
            print(shellcuts[arguments.shellcut])
        except KeyError:
            print("PRINT")
            print("ERROR: That shellcut does not exist.")

if __name__ == '__main__':
    main()
